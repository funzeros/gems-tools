import GMath from "./src/gMath";
import GMap from "./src/gMap";
import gType, {
  isType,
  isObject,
  isEmpty,
  isEmptyObject,
  isArray,
  isArguments,
  isNull,
  isNumber,
  isString,
  isBoolean,
  isFunction,
  isPromise,
  isDate,
  isRegExp,
  isMap,
  isSet,
  isSymbol,
  isError,
  isUndefined,
  isNaN,
  isElement,
} from "./src/gType";
import gObj, {
  clone,
  deepClone,
  extend,
  filterKeys,
  keepKeys,
  removeKeys,
  replaceKeys,
  mergeProperties,
  keys,
  omitBy,
  pick,
} from "./src/gObj";

import gUtils, { nextTick, copy } from "./src/gUtils";
import gArray, {
  forEachType,
  forEach,
  forEachRight,
  isArrayLike,
  deepFlatten,
  unique,
  intersection,
  intersectionAll,
  union,
  difference,
  differenceAll,
  array2Tree,
  tree2Array,
  array2Object,
  getTreeChains,
  arrayLike2Array,
  chunk,
  compact,
  countBy,
  countByValue,
  indexOfAll,
  shuffe,
  sample,
} from "./src/gArray";
export {
  GMath,
  GMap,
  //    gObj
  gObj,
  clone,
  deepClone,
  extend,
  filterKeys,
  keepKeys,
  removeKeys,
  replaceKeys,
  mergeProperties,
  keys,
  omitBy,
  pick,
  //    gType
  gType,
  isType,
  isObject,
  isEmpty,
  isEmptyObject,
  isArray,
  isArguments,
  isNull,
  isNumber,
  isString,
  isBoolean,
  isFunction,
  isPromise,
  isDate,
  isRegExp,
  isMap,
  isSet,
  isSymbol,
  isError,
  isUndefined,
  isNaN,
  isElement,
  // gArray
  gArray,
  forEachType,
  forEach,
  forEachRight,
  isArrayLike,
  deepFlatten,
  unique,
  intersection,
  intersectionAll,
  union,
  difference,
  differenceAll,
  array2Tree,
  tree2Array,
  array2Object,
  getTreeChains,
  arrayLike2Array,
  chunk,
  compact,
  countBy,
  countByValue,
  indexOfAll,
  shuffe,
  sample,
  // gUtils,
  gUtils,
  nextTick,
  copy,
};
